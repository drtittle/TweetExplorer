[{"id":"841cbc2e.889a1","type":"websocket out","z":"53363c6e.2d46bc","name":"Send Tweet to Page","server":"5e753c33.6e0024","client":"","x":681,"y":613.0000019073486,"wires":[]},{"id":"3317f070.dba89","type":"http response","z":"53363c6e.2d46bc","name":"","x":622,"y":100.00000190734863,"wires":[]},{"id":"c354993a.6419c8","type":"http in","z":"53363c6e.2d46bc","name":"","url":"/twitter","method":"get","swaggerDoc":"","x":220.00003051757812,"y":100.00000190734863,"wires":[["6508b258.b2f00c"]]},{"id":"56f2bbdc.467b4c","type":"twitter in","z":"53363c6e.2d46bc","twitter":"","tags":"","user":"false","name":"Get Tweets","topic":"tweets","inputs":1,"x":399,"y":230.00000190734863,"wires":[["32203753.6d18e"]]},{"id":"32203753.6d18e","type":"function","z":"53363c6e.2d46bc","name":"Payload = Tweet Text","func":"// Set the _id property in case we save to Cloudant\nmsg._id = msg.tweet.id_str;\n\nmsg.payload = msg.tweet.text;\nreturn msg;","outputs":1,"noerr":0,"x":438,"y":295.00000190734863,"wires":[["edada9e4.7e83"]]},{"id":"edada9e4.7e83","type":"sentiment","z":"53363c6e.2d46bc","name":"Get Tweet Sentiment","x":436,"y":360.00000190734863,"wires":[["f3bcc6e8.6d9da8"]]},{"id":"6508b258.b2f00c","type":"template","z":"53363c6e.2d46bc","name":"HTML Page","field":"payload","fieldType":"msg","format":"handlebars","syntax":"mustache","template":"<!DOCTYPE html>\n<html>\n    <head>\n\t\t<meta charset=\"utf-8\">\n\t\t<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n\t    <title>BlueMix Tweet Explorer</title>\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n\t\t<meta name=\"Description\" lang=\"en\" content=\"Bluemix Tweet Explorer\">\n\t\t<meta name=\"author\" content=\"David Tittle, IBM, 2017\">\n\t\t<meta name=\"robots\" content=\"index, none\">       \n\t\t<!-- icons -->\n\t\t<link rel=\"apple-touch-icon\" href=\"images/apple-touch-icon.png\">\n\t\t<link rel=\"shortcut icon\" href=\"images/twitter_64.png\">\n        <link rel=\"icon\" href=\"images/twitter_64.png\">\n        <script src=\"https://cdnjs.cloudflare.com/ajax/libs/tether/1.4.0/js/tether.min.js\"></script> \n\t\t<!-- Bootstrap Core CSS file -->\n\t\t<link rel=\"stylesheet\" href=\"css/bootstrap.min.css\">\n\t\t<!-- Override CSS file - add your own CSS rules -->\n        <!--\n\t\t<link rel=\"stylesheet\" href=\"css/styles.css\">\n        -->\n        <script type=\"text/javascript\" src=\"http://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js\"></script>\n        <script type=\"text/javascript\" src=\"http://maps.google.com/maps/api/js?sensor=false\"></script>        \n        <script type=\"text/javascript\" src=\"http://yourjavascript.com/4594301102/gmaps.js\"></script>        \n        <link rel=\"stylesheet\" type=\"text/css\" href=\"css/jqcloud.css\" />\n        <script type=\"text/javascript\" src=\"scripts/jqcloud-1.0.4.js\"></script>\n\t    <link rel=\"stylesheet\" href=\"css/jjsonviewer.css\">\n    \t<script type=\"text/javascript\" src=\"scripts/jjsonviewer.js\"></script>\n        <style type=\"text/css\" media=\"screen\">\n            /**\n            * Bootstrap requires a containing element to wrap site contents \n            * and house the grid system. You may choose one of two containers.\n            * Use .container for a responsive fixed width container.\n            * Use .container-fluid for a full width container.\n\n            * If using container-fluid, you may need to set a maximum width, \n            * so that the container will not spread to the entire viewport.\n            */\n            /*\n            .container-fluid { max-width: 1700px; }\n\n            XS <567 px\n            SM ≥567 px\n            MD ≥768 px\n            LG ≥992 px\n            XL ≥1200 px\n            */  \n\n            body,html {\n                height: 100%;\n            }\n\n            /* pad top for the fixed navbar */\n            body {\n                padding-top: 75px;\n            }\n\n            /* fixed and fluid on sm and up */\n            /*\n            @media (min-width: 768px) {\n                .fixed {\n                    flex: 0 0 180px;\n                    min-width: 180px;\n                }\n            }\n            */\n\n            .col.fluid (\n            min-height: 100%;\n            )\n\n            .modal-body{\n                height: 250px;\n                width: 350px;\n                overflow-y: auto;\n            }\n\n            @media (min-height: 500px) {\n                .modal-body {\n                    height: 400px;\n                }\n            }\n            @media (min-height: 800px) {\n                .modal-body {\n                    height: 600px;\n                }\n            }\n\n            @media (min-width: 34em) {\n                .card-columns {\n                    -webkit-column-count: 1;\n                    -moz-column-count: 1;\n                    column-count: 1;\n\n                    margin-right: 15px;\n                    margin-left: 15px;  \n                }\n            }\n            @media (min-width: 48em) {\n                .card-columns {\n                    -webkit-column-count: 1;\n                    -moz-column-count: 1;\n                    column-count: 1;\n\n                    margin-right: 15px;\n                    margin-left: 15px; \n                }\n            }\n            @media (min-width: 62em) {\n                .card-columns {\n                    -webkit-column-count: 2;\n                    -moz-column-count: 2;\n                    column-count: 2;\n                    \n                    margin-right: 15px;\n                    margin-left: 15px;\n                }\n            }\n            @media (min-width: 75em) {\n                .card-columns {\n                    -webkit-column-count: 2;\n                    -moz-column-count: 2;\n                    column-count: 2;\n\n                    margin-right: 15px;\n                    margin-left: 15px;\n                }\n            }\n\n\n            /* Round Image Nav-Bar buttons */\n            li {\n                display: inline-block;\n            }\n            input[type=\"checkbox\"][id^=\"cb\"] {\n                display: none;\n            }\n            label {\n                border: 1px solid #fff;\n                padding: 1px;\n                display: block;\n                position: relative;\n                margin: 1px;\n                cursor: pointer;\n\n                height: 46px;\n                width: 46px;\n\n                /*[{- Border radius -}]*/\n                border-radius: 50%;\n                -moz-border-radius: 50%;\n                -webkit-border-radius: 50%;\n                -ms-border-radius: 50%;\n                -khtml-border-radius: 50%;\n                -o-border-radius: 50%;\n            }\n            label:before {\n                background-color: white;\n                color: white;\n                content: \" \";\n                display: block;\n                border-radius: 50%;\n                border: 1px solid grey;\n                position: absolute;\n                top: -5px;\n                left: -5px;\n                width: 18px;\n                height: 19px;\n                text-align: center;\n                line-height: 17px;\n                transition-duration: 0.4s;\n                transform: scale(0);\n            }\n            label img {\n                height: 46px;\n                width: 46px;\n                transition-duration: 0.2s;\n                transform-origin: 50% 50%;\n\n                /*[{- Border radius -}]*/\n                border-radius: 50%;\n                -moz-border-radius: 50%;\n                -webkit-border-radius: 50%;\n                -ms-border-radius: 50%;\n                -khtml-border-radius: 50%;\n                -o-border-radius: 50%;\n            }\n            :checked + label {\n                border-color: #ddd;\n            }\n            :checked + label:before {\n                content: \"✓\";\n                background-color: grey;\n                transform: scale(1);\n            }\n            :checked + label img {\n                transform: scale(0.9);\n                box-shadow: 0 0 5px #333;\n                z-index: -1;\n            }\n            /* Round Image Nav-Bar buttons */\n\n\n            .angry, .wow, {\n                display: none;\n                visibility: hidden;\n            }\n            .sad, .like, .smiling, .laughing. love {\n                display: block;\n                visibility: visible;    \n            }\n\n\n            .roundShadowCard {\n                border-radius:      15px;\n                -moz-border-radius: 15px;    \n                -moz-box-shadow:    3px 3px 5px 6px #ccc;\n                -webkit-box-shadow: 3px 3px 5px 6px #ccc;\n                box-shadow:         3px 3px 5px 6px #ccc;\n            }\n            .card-block-canvas {\n                height: 90vh;\n                height: calc(90vh - 0px);\n                min-height: 20vh;\n                max-height: calc(90vh - 0px);\n                overflow: hidden;\n            }\n            .card-columns-canvas {\n                height: calc(90vh - 85px);\n                height: calc(90vh - 85px);\n                min-height: 20vh;\n                max-height: calc(90vh - 85px);    \n                overflow-y: auto;\n                /* border: 1px solid grey; */\n            }\n\n\n            #map { \n                height: 50vh;\n                min-height: 20vh;\n            }\n            #map-canvas {\n                height: 90vh;\n                height: calc(90vh - 80px);\n                min-height: 20vh;\n                max-height: calc(90vh - 80px);\n            }\n\n    \n            .tweet {\n                padding: 5px;\n                margin: 0 8px 8px;\n                overflow: hidden;\n            }\n            .tweet .avatar,\n            .tweet .user {\n                float:left;\n            }\n            .tweet .time {\n                float: right;\n                clear: right;\n                text-transform: uppercase;\n                font-size: 10px;\n                color: #AAAAAA;\n                white-space: nowrap;\n            }\n            .tweet .json {\n                float: right;\n                text-transform: uppercase;\n                font-size: 10px;\n                color: #AAAAAA;\n                white-space: nowrap;\n            }\n            .tweet .avatar img {\n                width: 36px;\n                height: 36px;\n                border: 2px solid #eeeeee;\n                margin: 0 5px 5px 0;\n            }\n            .tweet .txt {\n                clear: both;\n            }\n            .tweet .user {\n                font-weight: bold;\n            }\n            a, a:visited {\n                color: #00BBFF;\n                text-decoration:n one;\n                outline: none;\n            }\n            a:hover {\n                text-decoration: underline;\n            }            \n\n            #jsonBox {\n            width: 450px;\n            overflow-y: auto; \n            height: 85%;   \n            }        \n        </style>\n</head>\n\n\n\n<body>\n    <nav id=\"topNav\" class=\"navbar navbar-toggleable-md navbar-inverse bg-primary fixed-top\">\n        <button class=\"navbar-toggler navbar-toggler-right py-2\" type=\"button\" data-toggle=\"collapse\" data-target=\"#collapsingNavbar\">\n            ☰\n        </button>\n        <a class=\"navbar-brand\" href=\"#\">\n            <!--\n            <img alt=\"Bluemix and Twitter\" src=\"images/twitter_64.png\">\n            -->\n           <img alt=\"Bluemix Tweet Explorer\">           \n        </a>\n\n        <div class=\"collapse navbar-collapse\" id=\"collapsingNavbar\">\n            <ul class=\"nav navbar-nav\">\n\n                <li class=\"nav-item\"><input type=\"checkbox\" id=\"cbangry\" onclick=\"toggleVisibiltyToolbar(this.id, 'angry')\"/>\n                    <label id=\"labelAngry\" for=\"cbangry\"><img id=\"imgAngry\" src=\"images/emoji/emoji_angry_40.png\"/></label>\n                </li>\n                <li class=\"nav-item\"><input type=\"checkbox\" id=\"cbwow\" onclick=\"toggleVisibiltyToolbar(this.id, 'wow')\" title=\"Wow Sentiment - usually result of dismay, confusion or rejection, but can be misunderstood for shock of happiness.\"/>\n                    <label for=\"cbwow\"><img src=\"images/emoji/emoji_wow_40.png\"/></label>\n                </li>\n                <li class=\"nav-item\"><input type=\"checkbox\" id=\"cbsad\" onclick=\"toggleVisibiltyToolbar(this.id, 'sad')\" />\n                    <label for=\"cbsad\"><img src=\"images/emoji/emoji_sad_40.png\" title=\"Sad Sentiment - usually result of depressed, upset or tearful emotions.\"/></label>\n                </li>\n                <li class=\"nav-item\"><input type=\"checkbox\" id=\"cblike\" onclick=\"toggleVisibiltyToolbar(this.id, 'like')\" />\n                    <label for=\"cblike\"><img src=\"images/emoji/emoji_like_40.png\" title=\"Like Sentiment - the most general and nuetral emotional state.\"/></label>\n                </li>\n                <li class=\"nav-item\"><input type=\"checkbox\" id=\"cbsmiling\" onclick=\"toggleVisibiltyToolbar(this.id, 'smiling')\" />\n                    <label for=\"cbsmiling\"><img src=\"images/emoji/emoji_smiling_40.png\" title=\"Smiling Sentiment - is usually result of positive feelings and statements.\"/></label>\n                </li>\n                <li class=\"nav-item\"><input type=\"checkbox\" id=\"cblaughing\" onclick=\"toggleVisibiltyToolbar(this.id, 'laughing')\" />\n                    <label for=\"cblaughing\"><img src=\"images/emoji/emoji_laughing_40.png\" title=\"Laughing Sentiment - usually happy and cheeful, but can be misunderstood for angry laughing.\"/></label>\n                </li>\n                <li class=\"nav-item\"><input type=\"checkbox\" id=\"cblove\" onclick=\"toggleVisibiltyToolbar(this.id, 'love')\" />\n                    <label for=\"cblove\"><img src=\"images/emoji/emoji_love_40.png\" title=\"Love Sentiment - usually results of expressions of appreciation, joy, and togetherness.\"/></label>\n                </li>  \n\n\n                <li class=\"nav-item dropdown\">\n                    <a class=\"nav-link dropdown-toggle\" href=\"#\" id=\"navbarDropdown\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n                    Industry Searches\n                    </a>\n                    <div class=\"dropdown-menu\" aria-labelledby=\"navbarDropdown\">\n                        <a class=\"dropdown-item\" href=\"#\" onclick=\"setSearchCriteria('public')\">Public</a>\n                        <a class=\"dropdown-item\" href=\"#\" onclick=\"setSearchCriteria('distribution')\">Distribution</a>\n                        <a class=\"dropdown-item\" href=\"#\" onclick=\"setSearchCriteria('industrial')\">Industrial</a>\n                        <a class=\"dropdown-item\" href=\"#\" onclick=\"setSearchCriteria('commcsi')\">Comm/CSI</a>\n                        <a class=\"dropdown-item\" href=\"#\" onclick=\"setSearchCriteria('financial')\">Financial (FSM)</a>\n                        <a class=\"dropdown-item\" href=\"#\" onclick=\"setSearchCriteria('federal')\">Federal</a>\n                        <a class=\"dropdown-item\" href=\"#\" onclick=\"setSearchCriteria('canada')\">Canada</a>\n                    </div>\n                </li> \n\n\n                <!-- add search form -->\n                <form class=\"navbar-form navbar-right\" role=\"search\">\n                    <div class=\"input-group\">\n                        <input id=\"searchCriteria\" type=\"text\" class=\"form-control\" placeholder=\"Search for Tweets...\" title=\"Use space for and and comma , for or when searching for multiple terms.  Can be used to search either: (1) the public stream for tweets containing the configured search term, (2) all the tweets from accounts that the authenticated user follows, (3) all tweets by specified users, (4) direct messages received by the authenticated user, or (6) twitter events for the authenticated user\">\n                        <span class=\"input-group-btn\">\n                            <!--\n                            <button id=\"buttonSearch\" type=\"button\" class=\"btn btn-primary\" onclick=\"searchTweets()\"><span class=\"glyphicon glyphicon-search\" aria-hidden=\"true\"></span></button>\n                            -->\n                            <button id=\"buttonSearch\" type=\"button\" class=\"btn btn-success btn-sm\" onclick=\"searchTweets()\">Search</button>\n                        </span>\n                    </div>\n                </form>\n                <!--\n                <li class=\"nav-item dropdown\">\n                    <a class=\"nav-link dropdown-toggle\" href=\"#\" id=\"navbarDropdownDeploy\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n                    Deploy\n                    </a>\n                    <div class=\"dropdown-menu\" aria-labelledby=\"navbarDropdownDeploy\">\n                        <a class=\"dropdown-item\" href=\"https://bluemix.net/deploy?repository=https://drtittle@git.ng.bluemix.net/drtittle/TweetExplorer.git\" target=\"_blank\">Deploy to Bluemix...</a>\n                    </div>\n                </li>\n                --> \n                <li class=\"nav-item navbar-right\">\n                    <a class=\"nav-link page-scroll\" data-toggle=\"modal\" title=\"Click for an About Window...\" href=\"#aboutModal\">About</a>\n                </li>\n            </ul>\n        </div>\n    </nav>\n\n\n    <div class=\"container-fluid h-100\">\n        <div class=\"row h-100\">\n            <div class=\"col-xs-12 col-sm-6 col-md-6\">\n                <div class=\"card-block roundShadowCard\">\n                    <h4 class=\"card-title\">Geolocated Tweets<span id=\"tweetCountGeoLocated\" style=\"float: right;\"></span></h4>\n                    <div class=\"google-map-canvas\" id=\"map-canvas\">\n                    </div>\n                </div>\n            </div>\n            <div class=\"col-xs-12 col-sm-6 col-md-6\">\n                <div class=\"card-block card-block-canvas roundShadowCard\">\n                    <h4 class=\"card-title\">All Tweets<span id=\"tweetCount\" style=\"float: right;\"></span></h4>\n                    <div class=\"card-columns-canvas\">\n                        <div class=\"card-columns\" id=\"tweetBox\">\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n\n    <div id=\"aboutModal\" class=\"modal fade\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"myModalLabel\" aria-hidden=\"true\">\n        <div class=\"modal-dialog\">\n            <div class=\"modal-content\">\n                <div class=\"modal-header\">\n                    <h5 class=\"modal-title\">About Bluemix Tweet Explorer</h5>\n                    <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\">×</button>\n                </div>\n                <div class=\"modal-body\">\n                    <p>Composed by David Tittle - Bluemix Technical Specialist<br>Copyright IBM, October 2017<br>Documentation assistance from Summit Interns.\n                    </p> \n                    <div id=\"tags\" style=\"width: 350px; height: 250px;\"></div>\n                </div>\n                <!--\n                <div class=\"modal-footer\">\n                    <button class=\"btn\" data-dismiss=\"modal\" aria-hidden=\"true\">Close</button>\n                </div>\n                -->\n            </div>\n        </div>\n    </div>\n    <div id=\"jsonModal\" class=\"modal fade\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"myModalLabel\" aria-hidden=\"true\">\n        <div class=\"modal-dialog\">\n            <div class=\"modal-content\">\n                <div class=\"modal-header\">\n                    <h5 class=\"modal-title\">Bluemix Tweet Json Explorer</h5>\n                    <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\">×</button>\n                </div>\n                <div class=\"modal-body\">\n                    <div id=\"jsonBox\"></div>\n                </div>\n            </div>\n        </div>\n    </div>\n\n    <script type=\"text/javascript\">\n        var showAngry = false;\n        var showWow = false;\n        var showSad = true;\n        var showLike = true;\n        var showSmiling = true;\n        var showLaughing = true;\n        var showLove = true;\n\n        var arrayTweets = {};\n        var arrayUserNames = {};\n        var tweetCount = 0;\n        var tweetCountGeoLocated = 0;\n\n        var geocoder = new google.maps.Geocoder();\n\n        var map;\n        var markers = [];\n        var webSocketInput;\n        var webSocketInputAddress = \"ws://{{req.headers.host}}/ws/searchCriteria\";\n        var webSocketOutput;\n        var webSocketOutputAddress = \"ws://{{req.headers.host}}/ws/location\";\n        \n        $(document).ready(function()\n        {\n            // Initialize GMaps and set to Houston Lat Long in Degrees\n            map = new GMaps({\n                div: '#map-canvas',\n                lat: 29.7632836,\n                lng: -95.3632715,\n                minZoom: 3\n            });\n            \n            var styles = [{\"featureType\": \"landscape\", \"stylers\": [{\"saturation\": -100}, {\"lightness\": 65}, {\"visibility\": \"on\"}]},\n                          {\"featureType\": \"poi\", \"stylers\": [{\"saturation\": -100}, {\"lightness\": 51}, {\"visibility\": \"simplified\"}]}, \n                          {\"featureType\": \"road.highway\", \"stylers\": [{\"saturation\": -100}, {\"visibility\": \"simplified\"}]}, \n                          {\"featureType\": \"road.arterial\", \"stylers\": [{\"saturation\": -100}, {\"lightness\": 30}, {\"visibility\": \"on\"}]}, \n                          {\"featureType\": \"road.local\", \"stylers\": [{\"saturation\": -100}, {\"lightness\": 40}, {\"visibility\": \"on\"}]}, \n                          {\"featureType\": \"transit\", \"stylers\": [{\"saturation\": -100}, {\"visibility\": \"simplified\"}]}, \n                          {\"featureType\": \"administrative.province\", \"stylers\": [{\"visibility\": \"off\"}]}, \n                          {\"featureType\": \"water\", \"elementType\": \"labels\", \"stylers\": [{\"visibility\": \"on\"}, {\"lightness\": -25}, {\"saturation\": -100}]}, \n                          {\"featureType\": \"water\", \"elementType\": \"geometry\", \"stylers\": [{\"hue\": \"#ffff00\"}, {\"lightness\": -25}, {\"saturation\": -97}]}];\n            \n            /*\n            var styles = [{ \"featureType\": \"water\", \"stylers\": [ { \"saturation\": 43 }, { \"lightness\": -11 }, { \"hue\": \"#0088ff\" }]}, \n                          { \"featureType\": \"road\", \"elementType\": \"geometry.fill\", \"stylers\": [ { \"hue\": \"#ff0000\" }, { \"saturation\": -100 }, { \"lightness\": 99 }]}, \n                          { \"featureType\": \"road\", \"elementType\": \"geometry.stroke\", \"stylers\": [ { \"color\": \"#808080\" }, { \"lightness\": 54 }]}, \n                          { \"featureType\": \"landscape.man_made\", \"elementType\": \"geometry.fill\", \"stylers\": [ { \"color\": \"#ece2d9\" }]}, \n                          { \"featureType\": \"poi.park\", \"elementType\": \"geometry.fill\", \"stylers\": [ { \"color\": \"#ccdca1\" }]}, \n                          { \"featureType\": \"road\", \"elementType\": \"labels.text.fill\", \"stylers\": [ { \"color\": \"#767676\" }]}, \n                          { \"featureType\": \"road\", \"elementType\": \"labels.text.stroke\", \"stylers\": [ { \"color\": \"#ffffff\" }]}, \n                          { \"featureType\": \"poi\", \"stylers\": [ { \"visibility\": \"off\" }]}, \n                          { \"featureType\": \"landscape.natural\", \"elementType\": \"geometry.fill\", \"stylers\": [ { \"visibility\": \"on\" }, { \"color\": \"#b8cb93\" }]}, \n                          { \"featureType\": \"poi.park\", \"stylers\": [ { \"visibility\": \"on\" }]}, \n                          { \"featureType\": \"poi.sports_complex\", \"stylers\": [ { \"visibility\": \"on\" }]}, \n                          { \"featureType\": \"poi.medical\", \"stylers\": [ { \"visibility\": \"on\" }]}, \n                          { \"featureType\": \"poi.business\", \"stylers\": [ { \"visibility\": \"simplified\" }]}];                          \n            */\n            //map.set('styles', styles);\n\n\n            // Use HTML5 geolocation if user allows it.\n            if (navigator.geolocation)\n            {\n                navigator.geolocation.getCurrentPosition(function(position) {\n                    var pos = {\n                        lat: position.coords.latitude,\n                        lng: position.coords.longitude\n                    };\n                    map.setCenter(pos);\n                });\n            }           \n            map.setZoom (3);\n\n\n            // Create a WebSocket connecting to the Node-Red backend to receive search criteria.\n            webSocketInput = new WebSocket(webSocketInputAddress);\n            webSocketInput.onopen = function()\n            {\n                console.log(\"webSocketInput - Connected\");\n                console.log(\"webSocketInput - Sending first search string.\");\n                setSearchCriteria();\n                webSocketInput.send(\"IBM, IBM Cloud, Bluemix\");\n            };\n            webSocketInput.onerror = function()\n            {\n                console.log(\"webSocketInput - Error\");\n            };\n            webSocketInput.onmessage = function(evt)\n            {\n            }\n\n\n            // Create a WebSocket connecting to the Node-Red backet to receive Tweets\n            webSocketOutput = new WebSocket(webSocketOutputAddress);\n            webSocketOutput.onopen = function()\n            {\n                console.log(\"WebSocketOutput - Connected\");\n                console.log(\"WebSocketOutput - Sending ping\");\n                webSocketOutput.send(\"Ping.\");\n                console.log(\"WebSocketOutput - Ping sent\");\n            };\n            webSocketOutput.onerror = function()\n            {\n                console.log(\"WebSocketOutput - Error\");\n            };\n            webSocketOutput.onmessage = function(evt)\n            {\n                var tweetJson = evt.data;\n                var tweetMessage = JSON.parse(tweetJson);\n                var tweet = tweetMessage.tweet;\n                var tweetId = tweet.id_str;\n                var tweetScreenName = tweet.user.screen_name;\n                var tweetText = tweet.text;\n                var tweetExtractedProps = tweetMessage.extractedProps;\n\n                // Determine if we have a duplicate tweet.\n                var duplicate = false;\n                if(arrayTweets[tweetId] != null)\n                    duplicate = true;\n\n                // Save the tweet to an array.\n                arrayTweets[tweetId] = tweetJson;\n\n                // Sets the Default Tweet Icon.\n                var className = \"\";\n                var iconfile = 'http://{{req.headers.host}}/images/emoji/emoji_';\n\n                // Sets the Default Tweet Icon based upon the Sentiment score.\n                var sentimentScore = tweetMessage.sentiment.score == \"\" ? 0 : parseFloat (tweetMessage.sentiment.score);\n                if (sentimentScore < -6.0)\n                    className = 'angry';\n                else if (sentimentScore < -4.0) \n                    className = 'wow';\n                else if (sentimentScore < -2.0) \n                    className = 'sad';\n                else if (sentimentScore >= -2.0 && sentimentScore < 2.0)\n                    className = 'like';\n                else if (sentimentScore >= 2.0 && sentimentScore < 4.0)\n                    className = 'smiling';\n                else if (sentimentScore >= 4.0 && sentimentScore < 6.0)\n                    className = 'laughing';\n                else if (sentimentScore >= 6.0)\n                    className = 'love';\n\n                iconfile += className;\n                iconfile += '_32.png';\n\n                // Prepend the new div into our tweet Feed.\n                var tweetHtml = '<div id=' + tweetId + ' class=\"tweet ' + className + '\">\\\n                                    <div class=\"avatar\"><a href=\"http://twitter.com/' + tweetScreenName + '\" target=\"_blank\"><img src=\"' + tweet.user.profile_image_url + '\" alt=\"' + tweet.user.user_name + '\" /></a></div>\\\n                                    <div class=\"user\"><a href=\"http://twitter.com/' + tweetScreenName + '\" target=\"_blank\">' + tweetScreenName + '</a></div>\\\n                                    <div class=\"time\">' + getRelativeTime(tweet.created_at) + '</div>\\\n                                    <div class=\"json\"><a href=\"#\" onclick=\"showJson(' + \"'\" + tweetId + \"'\" + ')\">JSON</a></div>\\\n                                    <div class=\"txt\">' + getFormattedTweet(tweetText) + '</div>\\\n                                </div>';\n\n                // Store the JSON safely with the div.\n                $('body').data(tweetId, tweetJson);\n\n                // Attempt Geocoding of the Tweet\n                GMaps.geocode({\n                    address: tweetMessage.location,\n                    callback: function(results, status)\n                    {\n                        if (status == 'OK')\n                        {\n                            var location = results[0].geometry.location;\n                            // map.removeMarkers();\n                           \t// map.setCenter(location[0].lat, location[0].lng);\n                            \n                            var infoWindow = new google.maps.InfoWindow({ content: tweetHtml, maxWidth: 300 });\n\n                            // Add the Geolocated marker to the collection and possibly to the map.\n                            var marker = addMarker(tweetId, className, location, tweetScreenName, infoWindow, iconfile);\n \n                            // Update the count on the UI\n                            tweetCountGeoLocated += 1;\n                            $('#tweetCountGeoLocated').text(\"Count: \" + formatNumberString(tweetCountGeoLocated.toString()));                            \n                        }\n                    }\n                }); /* End of GMaps.geocode */\n\n                var tweetCardHtml = ' <div class=\"card card-outline-primary ' + className + '\">' + tweetHtml + '</div>';\n                if(!duplicate)\n                {\n                    $('#tweetBox').append(tweetCardHtml);\n                    tweetCount += 1;\n                    $('#tweetCount').text(\"Count: \" + formatNumberString(tweetCount.toString()));\n                }\n            }\n        });\n\n        \n        // Executes when complete page is fully loaded, including all frames, objects and images\n        $(window).on('load', function () {\n            $('cbAngry').attr('title', getTitle('angry'));\n            \n            $('labelAngry').attr('title', getTitle('angry'));\n            $('imgAngry').attr('title', getTitle('angry'));\n           \n            $(\"#cbangry\").prop('checked', showAngry);\n            $(\"#cbwow\").prop('checked', showWow);\n            $(\"#cbsad\").prop('checked', showSad);\n            $(\"#cblike\").prop('checked', showLike);\n            $(\"#cbsmiling\").prop('checked', showSmiling);\n            $(\"#cblaughing\").prop('checked', showLaughing);\n            $(\"#cblove\").prop('checked', showLove);\n           \n            // Set up the Word Cloud in the About Dialog\n            var tags = [\n                {text: \"IBM\", weight: 15, link: \"http://www.ibm.com/\"},\n                {text: \"Bluemix\", weight: 12, link: \"http://mybluemix.net/\"},\n                {text: \"Node.js\", weight: 9, link: \"https://nodejs.org/en/\"},\n                {text: \"Node-Red\", weight: 9, link: \"https://nodered.org/\"},\n                {text: \"Express\", weight: 7, link: \"http://expressjs.com/\"},\n                {text: \"Bootstrap\", weight: 7, link: \"http://getbootstrap.com/\"},\n                {text: \"JQuery\", weight: 7, link: \"http://jquery.com/\"},\n                {text: \"Twitter\", weight: 7}\n            ];\n            $(\"#tags\").jQCloud(tags, {\n                autoResize: true,\n                width: \"350px\",\n                height: \"250px\"\n            });\n        });\n\n        function getTitle(str) {\n            switch (str)\n            {\n                //case \"afshin\":\n                //case \"saeed\":\n                case 'angry':\n                    return \"Angry Sentiments - usually results of anger, proganity or yelling.\"; \n\n                default: \n                    return \"Angry Sentiments - usually results of anger, proganity or yelling.\"; \n            }\n        }\n\n        function setSearchCriteria(strMarket) {\n            var searchCriteria = \"\";\n            switch (strMarket)\n            {\n                case 'canada':\n                    searchCriteria = \"Colony, Territory, Province, British North America, Parliment, Elizabeth II\"; \n                    break;\n                case 'federal':\n                    searchCriteria = \"United States of America, government, leadership, Federal Bureau of Investigatios\"; \n                    break;\n                case 'financial':\n                    searchCriteria = \"Stock Market, Bull Market, investments, stock, hedge fund\"; \n                    break;\n                case 'commcsi':\n                    searchCriteria = \"Programming, Computer Science, technology\"; \n                    break;\n                case 'industrial':\n                    searchCriteria = \"Construction, manufacturing, environment\"; \n                    break;\n                case 'distribution':\n                    searchCriteria = \"Supply chain, carload, intermodal, weather, traffic\"; \n                    break;\n                case 'public':\n                    searchCriteria = \"Hiring Freeze, employment, payroll taxes, job market\"; \n                    break;\n\n                default: \n                    searchCriteria = \"IBM, IBM Cloud, Bluemix\"; \n            } \n            $('#searchCriteria').val(searchCriteria);   \n\n            console.log(searchCriteria);        \n        }\n\n        function searchTweets() {\n            // Clear our existing Tweets\n            $('#tweetBox').empty();\n            deleteMarkers();\n\n            // Reset our counters\n            tweetCountGeoLocated = 0;\n            $('#tweetCountGeoLocated').text(\"Count: \" + formatNumberString(tweetCountGeoLocated.toString()));                            \n            tweetCount = 0;\n            $('#tweetCount').text(\"Count: \" + formatNumberString(tweetCount.toString()));\n\n            // Update the server with out new search\n            var searchTerms = $('#searchCriteria').val();\n            console.log(searchTerms);\n            webSocketInput.send(searchTerms);\n        }\n\n        function toggleVisibiltyToolbar(buttonId, className) {\n            var isChecked = $('#' + buttonId).prop('checked');\n            toggleVisibilty(className, isChecked)\n        }\n\n        function toggleVisibilty(className, isVisible) {\n            var classNameFull = \".\" + className;           \n            var cls = $(classNameFull);           \n            \n            cls.toggle();\n           \n            switch (className)\n            {\n                case 'angry':\n                    showAngry = !showAngry;\n                    setMapVisiblity(className, showAngry);\n                    break;\n                case 'wow':\n                    showWow = !showWow;\n                    setMapVisiblity(className, showWow);\n                    break;\n                case 'sad':\n                    showSad = !showSad;\n                    setMapVisiblity(className, showSad);\n                    break;\n                case 'like':\n                    showLike = !showLike;\n                    setMapVisiblity(className, showLike);\n                    break;\n                case 'smiling':\n                    showSmiling = !showSmiling;\n                    setMapVisiblity(className, showSmiling);\n                    break;\n                case 'laughing':\n                    showLaughing = !showLaughing;\n                    setMapVisiblity(className, showLaughing);\n                    break;\n                case 'love':\n                    showLove = !showLove;\n                    setMapVisiblity(className, showLove);\n                    break;\n                default: \n                    break;\n            }\n        }        \n\n\n        // Twitter Helper functions\n        function getRelativeTime(pastTime) {\n            var origStamp = Date.parse(pastTime);\n            var curDate = new Date();\n            var currentStamp = curDate.getTime();\n\n            var difference = parseInt((currentStamp - origStamp)/1000);\n            \n            if(difference < 0)           return false;\n\n            if(difference <= 5)          return \"Just now\";\n            if(difference <= 20)         return \"Seconds ago\";\n            if(difference <= 60)         return \"A minute ago\";\n            if(difference < 3600)        return parseInt(difference/60)+\" minutes ago\";\n            if(difference <= 1.5*3600)   return \"One hour ago\";\n            if(difference < 23.5*3600)   return Math.round(difference/3600)+\" hours ago\";\n            if(difference < 1.5*24*3600) return \"One day ago\";\n\n            var dateArr = pastTime.split(' ');\n            var dateFormatted = dateArr[4].replace(/\\:\\d+$/,'')+' '+dateArr[2]+' '+dateArr[1]+(dateArr[3]!=curDate.getFullYear()?' '+dateArr[3]:'');\n\n            console.log(\"getRelativeTime: \" + dateFormatted);\n            return dateFormatted;\n        }  \n\n        function getFormattedTweet(str) {\n            str = ' ' + str;\n            str = str.replace(/((ftp|https?):\\/\\/([-\\w\\.]+)+(:\\d+)?(\\/([\\w/_\\.]*(\\?\\S+)?)?)?)/gm,'<a href=\"$1\" target=\"_blank\">$1</a>');\n            str = str.replace(/([^\\w])\\@([\\w\\-]+)/gm,'$1@<a href=\"http://twitter.com/$2\" target=\"_blank\">$2</a>');\n            str = str.replace(/([^\\w])\\#([\\w\\-]+)/gm,'$1<a href=\"http://twitter.com/search?q=%23$2\" target=\"_blank\">#$2</a>');\n            //console.log(\"getFormattedTweet: \" + str);\n            return str;\n        }\n\n        function formatNumberString(str)\n        {\n            str += '';\n            x = str.split('.');\n            x1 = x[0];\n            x2 = x.length > 1 ? '.' + x[1] : '';\n            var rgx = /(\\d+)(\\d{3})/;\n            while (rgx.test(x1)) {\n                x1 = x1.replace(rgx, '$1' + ',' + '$2');\n            }\n            return x1 + x2;\n        }\n\n\n        function showJson(id) {\n            //console.log('TweetId = ' + id);\n            var json = $('body').data(id);\n            $(\"#jsonBox\").jJsonViewer(json);\n            $('#jsonModal').modal('show');\n            return false;  // Stop default events and propagation\n        }\n\n        // Adds a marker to the map and push to the array.\n        function addMarker(id, className, location, title, infoWindow, icon) {\n            var marker = new google.maps.Marker({\n                id: id,\n                className: className,\n                position: location,\n                title: title,\n                infoWindow: infoWindow,\n                icon: icon\n                //map: map\n            });\n\n            marker.addListener('click', function() {\n                infoWindow.open(map.map, marker);\n            });\n\n            markers.push(marker);\n\n            // Make a determination to show the marker\n            if(className == 'angry' && showAngry ||\n               className == 'wow' && showWow ||\n               className == 'sad' && showSad ||\n               className == 'like' && showLike ||\n               className == 'smiling' && showSmiling ||\n               className == 'laughing' && showLaughing ||\n               className == 'love' && showLove)\n                    marker.setMap(map.map);\n\n            return marker;\n        }\n\n        // Sets the map on all markers in the array.\n        function setMapOnAll(map) {\n            for (var i = 0; i < markers.length; i++) {\n                markers[i].setMap(map);\n            }\n        }\n\n        // Sets the map on all markers in the array.\n        function setMapVisiblity(className, isVisible) {\n            for (var i = 0; i < markers.length; i++) {\n                if(markers[i].className == className){\n                    if(isVisible)\n                        markers[i].setMap(map.map);\n                    else\n                        markers[i].setMap(null);\n                }\n            }\n        }\n\n        // Removes the markers from the map, but keeps them in the array.\n        function clearMarkers() {\n            setMapOnAll(null);\n        }\n\n        // Shows any markers currently in the array.\n        function showMarkers() {\n            setMapOnAll(map.map);\n        }\n\n        // Deletes all markers in the array by removing references to them.\n        function deleteMarkers() {\n            clearMarkers();\n            markers = [];\n        }\n\n    </script>\n\n\t\t<!-- JQuery scripts -->\n        <!--\n\t    <script src=\"scripts/jquery-1.11.2.min.js\"></script>\n        -->\n\t\t<!-- Bootstrap Core scripts -->\n\t\t<script src=\"scripts/bootstrap.min.js\"></script>    \n    </body>\n</html>","output":"str","x":407.00002670288086,"y":100,"wires":[["3317f070.dba89"]]},{"id":"6a855e02.db1eb8","type":"twitter-text-extract-entities","z":"53363c6e.2d46bc","name":"Extract Tweet Values","x":437,"y":491.00000190734863,"wires":[["86d17551.1e9108"]]},{"id":"f3bcc6e8.6d9da8","type":"function","z":"53363c6e.2d46bc","name":"Payload = Tweet","func":"msg.payload = msg.tweet.text;\nreturn msg;","outputs":1,"noerr":0,"x":416,"y":428.00000190734863,"wires":[["6a855e02.db1eb8"]]},{"id":"86d17551.1e9108","type":"function","z":"53363c6e.2d46bc","name":"Store  Tweet Values","func":"var extractedProps = msg.payload;\nvar sentiment = msg.sentiment;  //.score\n\nvar msg2 = { payload : {\n        id: msg.tweet.id_str,\n\t\tlang : msg.lang,\n\t\tlocation: msg.location === undefined ? \"\" : msg.location.place,\n\t\tsentiment: sentiment,\n\t\textractedProps: extractedProps,\n\t\ttweet: msg.tweet}\n\t};\t\n\n// The 'context' object is available to store state\n// between invocations of the function\n//   context = {};\ncontext.global.location = msg2.payload;\nreturn msg2;","outputs":1,"noerr":0,"x":428,"y":551.0000019073486,"wires":[["841cbc2e.889a1"]]},{"id":"ffb554e6.ad1b88","type":"websocket in","z":"53363c6e.2d46bc","name":"Get Search Criteria","server":"127812a2.112e6d","client":"","x":202,"y":167.00000190734863,"wires":[["b6edf8c2.cbe96"]]},{"id":"d2c42e90.16db78","type":"function","z":"53363c6e.2d46bc","name":"Get Global Context","func":"// The 'context' object is available to store state\n// between invocations of the function\n//   context = {};\n\nmsg.payload = context.global.location;\nreturn msg;","outputs":1,"noerr":0,"x":429,"y":614.0000629425049,"wires":[["841cbc2e.889a1"]]},{"id":"3f2c59e7.2b90c6","type":"websocket in","z":"53363c6e.2d46bc","name":"Send Tweet to Page","server":"5e753c33.6e0024","client":"","x":205,"y":614.0000019073486,"wires":[["d2c42e90.16db78"]]},{"id":"b6edf8c2.cbe96","type":"function","z":"53363c6e.2d46bc","name":"Kill Session","func":"msg._session=\"\";\nreturn msg; ","outputs":1,"noerr":0,"x":408,"y":167.00000190734863,"wires":[["69ab0d68.1e1a94","56f2bbdc.467b4c"]]},{"id":"69ab0d68.1e1a94","type":"websocket out","z":"53363c6e.2d46bc","name":"Get Search Criteria","server":"127812a2.112e6d","client":"","x":661.5,"y":167.00000190734863,"wires":[]},{"id":"5e753c33.6e0024","type":"websocket-listener","z":"","path":"/ws/location","wholemsg":"false"},{"id":"127812a2.112e6d","type":"websocket-listener","z":"","path":"/ws/searchCriteria","wholemsg":"false"}]